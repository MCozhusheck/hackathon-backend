/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface WhitelistInterface extends utils.Interface {
  functions: {
    "addToWhitelist(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToWhitelist"
      | "isWhitelisted"
      | "removeFromWhitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "AddToWhitelist(address)": EventFragment;
    "RemoveFromWhitelist(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFromWhitelist"): EventFragment;
}

export interface AddToWhitelistEventObject {
  _address: string;
}
export type AddToWhitelistEvent = TypedEvent<
  [string],
  AddToWhitelistEventObject
>;

export type AddToWhitelistEventFilter = TypedEventFilter<AddToWhitelistEvent>;

export interface RemoveFromWhitelistEventObject {
  _address: string;
}
export type RemoveFromWhitelistEvent = TypedEvent<
  [string],
  RemoveFromWhitelistEventObject
>;

export type RemoveFromWhitelistEventFilter =
  TypedEventFilter<RemoveFromWhitelistEvent>;

export interface Whitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFromWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addToWhitelist(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isWhitelisted(_address: string, overrides?: CallOverrides): Promise<boolean>;

  removeFromWhitelist(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToWhitelist(_address: string, overrides?: CallOverrides): Promise<void>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromWhitelist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddToWhitelist(address)"(
      _address?: string | null
    ): AddToWhitelistEventFilter;
    AddToWhitelist(_address?: string | null): AddToWhitelistEventFilter;

    "RemoveFromWhitelist(address)"(
      _address?: string | null
    ): RemoveFromWhitelistEventFilter;
    RemoveFromWhitelist(
      _address?: string | null
    ): RemoveFromWhitelistEventFilter;
  };

  estimateGas: {
    addToWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
