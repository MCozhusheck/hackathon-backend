/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IWhitelistPaymasterInterface extends utils.Interface {
  functions: {
    "isWhitelistedSender(address)": FunctionFragment;
    "isWhitelistedTarget(address)": FunctionFragment;
    "whitelistSender(address)": FunctionFragment;
    "whitelistTarget(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isWhitelistedSender"
      | "isWhitelistedTarget"
      | "whitelistSender"
      | "whitelistTarget"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isWhitelistedSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedTarget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTarget",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isWhitelistedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTarget",
    data: BytesLike
  ): Result;

  events: {
    "Accepted(address,address,uint256)": EventFragment;
    "WhitelistedSenderAddressAdded(address)": EventFragment;
    "WhitelistedSenderAddressRemoved(address)": EventFragment;
    "WhitelistedTargetAddressAdded(address)": EventFragment;
    "WhitelistedTargetAddressRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accepted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistedSenderAddressAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistedSenderAddressRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistedTargetAddressAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistedTargetAddressRemoved"
  ): EventFragment;
}

export interface AcceptedEventObject {
  onBehlafOf: string;
  to: string;
  gas: BigNumber;
}
export type AcceptedEvent = TypedEvent<
  [string, string, BigNumber],
  AcceptedEventObject
>;

export type AcceptedEventFilter = TypedEventFilter<AcceptedEvent>;

export interface WhitelistedSenderAddressAddedEventObject {
  addr: string;
}
export type WhitelistedSenderAddressAddedEvent = TypedEvent<
  [string],
  WhitelistedSenderAddressAddedEventObject
>;

export type WhitelistedSenderAddressAddedEventFilter =
  TypedEventFilter<WhitelistedSenderAddressAddedEvent>;

export interface WhitelistedSenderAddressRemovedEventObject {
  addr: string;
}
export type WhitelistedSenderAddressRemovedEvent = TypedEvent<
  [string],
  WhitelistedSenderAddressRemovedEventObject
>;

export type WhitelistedSenderAddressRemovedEventFilter =
  TypedEventFilter<WhitelistedSenderAddressRemovedEvent>;

export interface WhitelistedTargetAddressAddedEventObject {
  addr: string;
}
export type WhitelistedTargetAddressAddedEvent = TypedEvent<
  [string],
  WhitelistedTargetAddressAddedEventObject
>;

export type WhitelistedTargetAddressAddedEventFilter =
  TypedEventFilter<WhitelistedTargetAddressAddedEvent>;

export interface WhitelistedTargetAddressRemovedEventObject {
  addr: string;
}
export type WhitelistedTargetAddressRemovedEvent = TypedEvent<
  [string],
  WhitelistedTargetAddressRemovedEventObject
>;

export type WhitelistedTargetAddressRemovedEventFilter =
  TypedEventFilter<WhitelistedTargetAddressRemovedEvent>;

export interface IWhitelistPaymaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWhitelistPaymasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isWhitelistedSender(
      sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedTarget(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistSender(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelistTarget(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  isWhitelistedSender(
    sender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedTarget(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistSender(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelistTarget(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    isWhitelistedSender(
      sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedTarget(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistSender(arg0: string, overrides?: CallOverrides): Promise<void>;

    whitelistTarget(arg0: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Accepted(address,address,uint256)"(
      onBehlafOf?: string | null,
      to?: string | null,
      gas?: null
    ): AcceptedEventFilter;
    Accepted(
      onBehlafOf?: string | null,
      to?: string | null,
      gas?: null
    ): AcceptedEventFilter;

    "WhitelistedSenderAddressAdded(address)"(
      addr?: null
    ): WhitelistedSenderAddressAddedEventFilter;
    WhitelistedSenderAddressAdded(
      addr?: null
    ): WhitelistedSenderAddressAddedEventFilter;

    "WhitelistedSenderAddressRemoved(address)"(
      addr?: null
    ): WhitelistedSenderAddressRemovedEventFilter;
    WhitelistedSenderAddressRemoved(
      addr?: null
    ): WhitelistedSenderAddressRemovedEventFilter;

    "WhitelistedTargetAddressAdded(address)"(
      addr?: null
    ): WhitelistedTargetAddressAddedEventFilter;
    WhitelistedTargetAddressAdded(
      addr?: null
    ): WhitelistedTargetAddressAddedEventFilter;

    "WhitelistedTargetAddressRemoved(address)"(
      addr?: null
    ): WhitelistedTargetAddressRemovedEventFilter;
    WhitelistedTargetAddressRemoved(
      addr?: null
    ): WhitelistedTargetAddressRemovedEventFilter;
  };

  estimateGas: {
    isWhitelistedSender(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedTarget(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistSender(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelistTarget(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isWhitelistedSender(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedTarget(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistSender(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelistTarget(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
